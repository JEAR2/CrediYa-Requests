server:
  port: 8081
spring:
  application:
    name: "Requests"
  devtools:
    add-properties: false
  h2:
    console:
      enabled: true
      path: "/h2"
  profiles:
    include: null
management:
  endpoints:
    web:
      exposure:
        include: "health,prometheus"
  endpoint:
    health:
      probes:
        enabled: true
  health:
    circuitbreakers:
      enabled: true
cors:
  allowed-origins: "http://localhost:4200,http://authentication:8080,"

adapter:
  restconsumer:
    timeout: 5000
    url: ${AUTH_URL:http://authentication:8080/api/v1/users}
routes:
  paths:
    requests: "/api/v1/requests"
    requestId: "/api/v1/request/{id}"
    requestsList: "/api/v1/requests/list"

resilience4j:
  circuitbreaker:
    instances:
      testGet:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"
      testPost:
        registerHealthIndicator: true
        failureRateThreshold: 50
        slowCallRateThreshold: 50
        slowCallDurationThreshold: "2s"
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        minimumNumberOfCalls: 10
        waitDurationInOpenState: "10s"

adapters:
  r2dbc:
    host: ${R2DBC_HOST}
    port: ${R2DBC_PORT}
    database: ${R2DBC_DATABASE}
    schema: ${R2DBC_SCHEMA}
    username: ${R2DBC_USERNAME}
    password: ${R2DBC_PASSWORD}

security:
  jwt:
    expiration: 3600000
    public-key-location: ${JWT_PUBLIC_KEY}

aws:
  sqs:
    queueUrl: ${AWS_URL_SQS}